version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: manufacturing-db
    environment:
      POSTGRES_DB: manufacturing_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - manufacturing-network
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: manufacturing-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_NAME: manufacturing_db
      DB_USER: postgres
      DB_PASS: password
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - manufacturing-network
    restart: unless-stopped
    volumes:
      - ./server:/app
      - /app/node_modules
    command: npm start

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: manufacturing-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - manufacturing-network
    restart: unless-stopped

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: manufacturing-redis
    ports:
      - "6379:6379"
    networks:
      - manufacturing-network
    restart: unless-stopped
    volumes:
      - redis_data:/data

  # Nginx (Load Balancer and Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: manufacturing-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - manufacturing-network
    restart: unless-stopped

networks:
  manufacturing-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local